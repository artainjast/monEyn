import React, { useState, useEffect } from 'react';
import { Card } from '../components/Card';
import { Button } from '../components/Button';
import { Input } from '../components/Input';
import { Select } from '../components/Select';
import { DatePicker } from '../components/DatePicker';
import { Modal } from '../components/Modal';
import { PaymentCalendar } from '../components/PaymentCalendar';
import { FriendLoan, Card as CardType } from '../types';
import { friendLoansService, cardsService } from '../services';
import { Plus, Edit, Trash2, CheckCircle, AlertCircle, Calendar, Users, PartyPopper } from 'lucide-react';
import { format } from 'date-fns';

export const FriendLoans: React.FC = () => {
    const [friendLoans, setFriendLoans] = useState<FriendLoan[]>([]);
    const [cards, setCards] = useState<CardType[]>([]);
    const [loading, setLoading] = useState(true);
    const [showAddModal, setShowAddModal] = useState(false);
    const [showPaybackModal, setShowPaybackModal] = useState(false);
    const [showPaymentScheduleModal, setShowPaymentScheduleModal] = useState(false);
    const [editingFriendLoan, setEditingFriendLoan] = useState<FriendLoan | null>(null);
    const [paybackFriendLoan, setPaybackFriendLoan] = useState<FriendLoan | null>(null);
    const [selectedPaybackCardId, setSelectedPaybackCardId] = useState('');
    const [selectedPaymentId, setSelectedPaymentId] = useState<string | null>(null);
    const [paymentSchedule, setPaymentSchedule] = useState<{ date: number; amount: number }[]>([]);
    const [selectedDate, setSelectedDate] = useState<number | null>(null);
    const [paymentAmount, setPaymentAmount] = useState('');

    const [formData, setFormData] = useState({
        friendName: '',
        amount: '',
        currency: 'IRR',
        cardId: '',
        loanDate: Date.now(),
        description: '',
    });

    useEffect(() => {
        loadData();
    }, []);

    const loadData = async () => {
        try {
            const [friendLoansData, cardsData] = await Promise.all([
                friendLoansService.getAll(),
                cardsService.getAll()
            ]);


            setFriendLoans(friendLoansData);
            setCards(cardsData);
            setFormData({
                ...formData,
                cardId: cardsData[0].id,
            })
        } catch (error) {
            console.error('Error loading data:', error);
        } finally {
            setLoading(false);
        }
    };

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();

        try {
            // Create payment schedule if provided
            const payments = paymentSchedule.map(payment => ({
                id: '', // Will be generated by the service
                amount: payment.amount,
                dueDate: payment.date,
                status: 'pending' as const,
            }));

            const friendLoanData = {
                friendName: formData.friendName,
                amount: parseFloat(formData.amount),
                currency: formData.currency,
                cardId: formData.cardId,
                loanDate: formData.loanDate,
                description: formData.description,
                status: 'active' as const,
                payments: payments,
            };

            if (editingFriendLoan) {
                await friendLoansService.update(editingFriendLoan.id, friendLoanData);
            } else {
                await friendLoansService.create(friendLoanData);
            }

            setShowAddModal(false);
            setEditingFriendLoan(null);
            setFormData({
                friendName: '',
                amount: '',
                currency: 'IRR',
                cardId: '',
                loanDate: Date.now(),
                description: '',
            });
            setPaymentSchedule([]);
            loadData();
        } catch (error) {
            console.error('Error saving friend loan:', error);
        }
    };

    const handleEdit = (friendLoan: FriendLoan) => {
        setEditingFriendLoan(friendLoan);
        setFormData({
            friendName: friendLoan.friendName,
            amount: friendLoan.amount.toString(),
            currency: friendLoan.currency,
            cardId: friendLoan.cardId,
            loanDate: friendLoan.loanDate,
            description: friendLoan.description || '',
        });
        setShowAddModal(true);
    };

    const handleDelete = async (friendLoanId: string) => {
        if (window.confirm('Are you sure you want to delete this friend loan?')) {
            try {
                await friendLoansService.delete(friendLoanId);
                loadData();
            } catch (error) {
                console.error('Error deleting friend loan:', error);
            }
        }
    };

    const handleMarkPaid = async (friendLoanId: string, paymentId?: string) => {
        try {
            // Get the friend loan to find the payment
            const friendLoan = await friendLoansService.getById(friendLoanId);

            if (friendLoan) {
                setPaybackFriendLoan(friendLoan);
                setSelectedPaymentId(paymentId || null);
                setSelectedPaybackCardId(cards[0]?.id || '');
                setShowPaybackModal(true);
            }
        } catch (error) {
            console.error('Error loading friend loan:', error);
        }
    };

    const handleConfirmPayback = async () => {
        if (!paybackFriendLoan || !selectedPaybackCardId) return;

        try {
            if (selectedPaymentId) {
                // Mark specific payment as paid
                await friendLoansService.markPaymentPaid(
                    paybackFriendLoan.id,
                    selectedPaymentId,
                    selectedPaybackCardId
                );
            } else if (paybackFriendLoan.payments.length > 0) {
                // Full settlement - mark all unpaid payments as paid
                const unpaidPayments = paybackFriendLoan.payments.filter(p => p.status === 'pending');
                for (const payment of unpaidPayments) {
                    await friendLoansService.markPaymentPaid(
                        paybackFriendLoan.id,
                        payment.id,
                        selectedPaybackCardId
                    );
                }
            } else {
                // If no payments exist, mark the entire loan as completed
                await friendLoansService.update(paybackFriendLoan.id, { status: 'completed' });
            }

            setShowPaybackModal(false);
            setPaybackFriendLoan(null);
            setSelectedPaymentId(null);
            setSelectedPaybackCardId('');
            loadData();
        } catch (error) {
            console.error('Error marking loan as paid:', error);
        }
    };

    const isFormValid = () => {
        const hasRequiredFields = formData.friendName.trim() &&
            formData.amount &&
            parseFloat(formData.amount) > 0 &&
            formData.cardId;

        const hasValidPaymentSchedule = paymentSchedule.length === 0 ||
            Math.abs(paymentSchedule.reduce((sum, payment) => sum + payment.amount, 0) - parseFloat(formData.amount || '0')) < 0.01;

        return hasRequiredFields && hasValidPaymentSchedule;
    };

    const getStatusColor = (status: FriendLoan['status']) => {
        switch (status) {
            case 'active': return 'bg-green-100 text-green-800';
            case 'completed': return 'bg-blue-100 text-blue-800';
            case 'settled': return 'bg-purple-100 text-purple-800';
            case 'defaulted': return 'bg-red-100 text-red-800';
            default: return 'bg-gray-100 text-gray-800';
        }
    };

    const isOverdue = (friendLoan: FriendLoan) => {
        const today = Date.now();
        const todayStart = new Date(today);
        todayStart.setHours(0, 0, 0, 0);

        if (friendLoan.payments.length === 0) return false;

        return friendLoan.payments.some(payment => {
            const dueDate = new Date(payment.dueDate);
            dueDate.setHours(0, 0, 0, 0);
            return dueDate < todayStart && payment.status === 'pending';
        });
    };

    const getDaysUntilDue = (friendLoan: FriendLoan) => {
        const today = Date.now();
        const todayStart = new Date(today);
        todayStart.setHours(0, 0, 0, 0);

        if (friendLoan.payments.length === 0) return 0;

        const nextPayment = friendLoan.payments
            .filter(p => p.status === 'pending')
            .sort((a, b) => a.dueDate - b.dueDate)[0];

        if (!nextPayment) return 0;

        const dueDate = new Date(nextPayment.dueDate);
        dueDate.setHours(0, 0, 0, 0);
        const diffTime = dueDate.getTime() - todayStart.getTime();
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
        return diffDays;
    };

    if (loading) {
        return (
            <div className="flex items-center justify-center h-64">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600"></div>
            </div>
        );
    }

    return (
        <div className="space-y-6">
            {/* Header */}
            <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4">
                <div>
                    <h1 className="text-2xl sm:text-3xl font-bold text-gray-900">Friend Loans</h1>
                    <p className="text-gray-600">Track money you've lent to friends</p>
                </div>
                <Button onClick={() => setShowAddModal(true)} className="w-full sm:w-auto">
                    <Plus className="w-4 h-4 mr-2" />
                    Add Friend Loan
                </Button>
            </div>

            {/* Friend Loans Grid */}
            <div className="grid grid-cols-1 xl:grid-cols-2 gap-4 sm:gap-6">
                {friendLoans.map((friendLoan) => {
                    const daysUntilDue = getDaysUntilDue(friendLoan);
                    const overdue = isOverdue(friendLoan);

                    return (
                        <Card key={friendLoan.id} className={`relative ${friendLoan.status === 'settled' ? 'border-purple-200 bg-gradient-to-br from-purple-50 to-pink-50' : ''}`}>
                            <div className="flex items-center justify-between mb-4">
                                <div className="flex items-center">
                                    {friendLoan.status === 'settled' ? (
                                        <PartyPopper className="w-5 h-5 mr-2 text-purple-600" />
                                    ) : (
                                        <Users className="w-5 h-5 mr-2 text-gray-500" />
                                    )}
                                    <h3 className={`text-lg font-semibold ${friendLoan.status === 'settled' ? 'text-purple-900' : 'text-gray-900'}`}>
                                        {friendLoan.friendName}
                                    </h3>
                                    <span className={`ml-3 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(friendLoan.status)}`}>
                                        {friendLoan.status === 'settled' ? '🎉 Settled' : friendLoan.status}
                                    </span>
                                </div>
                                <div className="flex space-x-2">
                                    <button
                                        onClick={() => handleEdit(friendLoan)}
                                        className="text-gray-400 hover:text-gray-600"
                                    >
                                        <Edit className="w-4 h-4" />
                                    </button>
                                    <button
                                        onClick={() => handleDelete(friendLoan.id)}
                                        className="text-gray-400 hover:text-red-600"
                                    >
                                        <Trash2 className="w-4 h-4" />
                                    </button>
                                </div>
                            </div>

                            <div className="space-y-3">
                                <div>
                                    <p className="text-sm text-gray-500">Amount Lent</p>
                                    <p className="font-semibold text-gray-900">
                                        {friendLoan.amount.toLocaleString('fa-IR')} {friendLoan.currency}
                                    </p>
                                </div>

                                <div>
                                    <p className="text-sm text-gray-500">Lent From Card</p>
                                    <p className="text-sm text-gray-900">
                                        {cards.find(card => card.id === friendLoan.cardId)?.name || 'Unknown Card'}
                                    </p>
                                </div>

                                {friendLoan.status === 'completed' && friendLoan.payments.some(p => p.paybackCardId) && (
                                    <div>
                                        <p className="text-sm text-gray-500">Returned To Card</p>
                                        <p className="text-sm text-gray-900">
                                            {cards.find(card => card.id === friendLoan.payments.find(p => p.paybackCardId)?.paybackCardId)?.name || 'Unknown Card'}
                                        </p>
                                    </div>
                                )}

                                {friendLoan.payments.length > 0 && (
                                    <div>
                                        <p className="text-sm text-gray-500 mb-2">Payment Schedule</p>
                                        <div className="space-y-1">
                                            {friendLoan.payments.map((payment, index) => (
                                                <div key={index} className="flex justify-between items-center text-sm">
                                                    <div className="flex items-center">
                                                        <span className="text-gray-700">
                                                            {format(payment.dueDate, 'MMM dd, yyyy')}
                                                        </span>
                                                        {payment.status === 'paid' && (
                                                            <CheckCircle className="w-3 h-3 text-green-500 ml-1" />
                                                        )}
                                                        {payment.status === 'overdue' && (
                                                            <AlertCircle className="w-3 h-3 text-red-500 ml-1" />
                                                        )}
                                                    </div>
                                                    <div className="flex items-center space-x-2">
                                                        <span className={`font-medium ${payment.status === 'paid' ? 'text-green-600' :
                                                            payment.status === 'overdue' ? 'text-red-600' :
                                                                'text-gray-700'
                                                            }`}>
                                                            {payment.amount.toLocaleString('fa-IR')} {friendLoan.currency}
                                                        </span>
                                                        {payment.status === 'paid' && payment.paybackCardId && (
                                                            <span className="text-xs text-gray-500">
                                                                to {cards.find(card => card.id === payment.paybackCardId)?.name}
                                                            </span>
                                                        )}
                                                        {payment.status === 'pending' && (
                                                            <button
                                                                onClick={() => handleMarkPaid(friendLoan.id, payment.id)}
                                                                className="text-xs bg-green-100 text-green-700 px-2 py-1 rounded hover:bg-green-200 transition-colors"
                                                            >
                                                                Mark Paid
                                                            </button>
                                                        )}
                                                    </div>
                                                </div>
                                            ))}
                                        </div>

                                        {/* Payment Progress */}
                                        <div className="mt-2">
                                            <div className="flex justify-between text-xs text-gray-500 mb-1">
                                                <span>Progress</span>
                                                <span>
                                                    {friendLoan.payments.filter(p => p.status === 'paid').length} / {friendLoan.payments.length} paid
                                                </span>
                                            </div>
                                            <div className="w-full bg-gray-200 rounded-full h-2">
                                                <div
                                                    className="bg-green-500 h-2 rounded-full transition-all duration-300"
                                                    style={{
                                                        width: `${(friendLoan.payments.filter(p => p.status === 'paid').length / friendLoan.payments.length) * 100}%`
                                                    }}
                                                ></div>
                                            </div>
                                        </div>
                                    </div>
                                )}

                                {friendLoan.status === 'settled' && (
                                    <div className="bg-purple-100 border border-purple-200 rounded-lg p-3 mt-3">
                                        <div className="flex items-center">
                                            <PartyPopper className="w-4 h-4 text-purple-600 mr-2" />
                                            <div>
                                                <p className="text-sm font-medium text-purple-800">
                                                    🎉 Loan Fully Settled!
                                                </p>
                                                <p className="text-xs text-purple-600">
                                                    All payments have been received from {friendLoan.friendName}
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                )}

                                {friendLoan.description && (
                                    <div>
                                        <p className="text-sm text-gray-500">Description</p>
                                        <p className="text-sm text-gray-900">{friendLoan.description}</p>
                                    </div>
                                )}

                                <div className="grid grid-cols-2 gap-4">
                                    <div>
                                        <p className="text-sm text-gray-500">Loan Date</p>
                                        <p className="text-sm text-gray-900">
                                            {format(friendLoan.loanDate, 'MMM dd, yyyy')}
                                        </p>
                                    </div>
                                    <div>
                                        <p className="text-sm text-gray-500">Status</p>
                                        <div className="flex items-center">
                                            {overdue && friendLoan.status === 'active' ? (
                                                <div className="flex items-center text-red-600">
                                                    <AlertCircle className="w-4 h-4 mr-1" />
                                                    <span className="text-sm font-medium">Overdue</span>
                                                </div>
                                            ) : daysUntilDue > 0 ? (
                                                <div className="flex items-center text-yellow-600">
                                                    <Calendar className="w-4 h-4 mr-1" />
                                                    <span className="text-sm font-medium">{daysUntilDue} days left</span>
                                                </div>
                                            ) : (
                                                <div className="flex items-center text-green-600">
                                                    <CheckCircle className="w-4 h-4 mr-1" />
                                                    <span className="text-sm font-medium">Due today</span>
                                                </div>
                                            )}
                                        </div>
                                    </div>
                                </div>

                                {friendLoan.status === 'active' && (
                                    <div className="pt-3 border-t">
                                        {friendLoan.payments.length === 0 ? (
                                            <Button
                                                size="sm"
                                                variant="success"
                                                onClick={() => handleMarkPaid(friendLoan.id)}
                                                className="w-full"
                                            >
                                                <CheckCircle className="w-3 h-3 mr-1" />
                                                Mark as Paid Back
                                            </Button>
                                        ) : (
                                            <div className="space-y-2">
                                                <Button
                                                    size="sm"
                                                    variant="success"
                                                    onClick={() => handleMarkPaid(friendLoan.id)}
                                                    className="w-full"
                                                >
                                                    <CheckCircle className="w-3 h-3 mr-1" />
                                                    Full Settlement
                                                </Button>
                                                <p className="text-xs text-gray-500 text-center">
                                                    Or mark individual payments above
                                                </p>
                                            </div>
                                        )}
                                    </div>
                                )}
                            </div>
                        </Card>
                    );
                })}
            </div>

            {friendLoans.length === 0 && (
                <div className="text-center py-12 flex flex-col items-center justify-center">
                    <Users className="w-16 h-16 mx-auto text-gray-400 mb-4" />
                    <h2 className="text-2xl font-bold text-gray-900 mb-4">No friend loans yet</h2>
                    <p className="text-gray-600 mb-8">Add your first friend loan to start tracking money you've lent.</p>
                    <Button onClick={() => setShowAddModal(true)}>
                        <Plus className="w-4 h-4 mr-2" />
                        Add Friend Loan
                    </Button>
                </div>
            )}

            {/* Add/Edit Friend Loan Modal */}
            <Modal
                isOpen={showAddModal}
                onClose={() => {
                    setShowAddModal(false);
                    setEditingFriendLoan(null);
                    setFormData({
                        friendName: '',
                        amount: '',
                        currency: 'IRR',
                        cardId: '',
                        loanDate: Date.now(),
                        description: '',
                    });
                }}
                title={editingFriendLoan ? 'Edit Friend Loan' : 'Add New Friend Loan'}
                size="lg"
            >
                <form onSubmit={handleSubmit} className="space-y-4">
                    <Input
                        label="Friend's Name"
                        value={formData.friendName}
                        onChange={(e) => setFormData(prev => ({ ...prev, friendName: e.target.value }))}
                        required
                        placeholder="Enter friend's name"
                    />

                    <div className="grid grid-cols-2 gap-4">
                        <Input
                            label="Amount Lent"
                            type="number"
                            formatNumber={true}
                            value={formData.amount}
                            onChange={(e) => setFormData(prev => ({ ...prev, amount: e.target.value }))}
                            required
                            placeholder="0"
                        />

                        <Select
                            label="Currency"
                            value={formData.currency}
                            onChange={(e) => setFormData(prev => ({ ...prev, currency: e.target.value }))}
                            options={[
                                { value: 'IRR', label: 'Iranian Rial (ریال)' },
                                { value: 'USD', label: 'US Dollar ($)' },
                                { value: 'EUR', label: 'Euro (€)' },
                            ]}
                        />
                    </div>

                    <Select
                        label="Card to Lend From"
                        value={formData.cardId}
                        onChange={(e) => setFormData(prev => ({ ...prev, cardId: e.target.value }))}
                        options={cards.map(card => ({
                            value: card.id,
                            label: `${card.name} (${card.balance.toLocaleString('fa-IR')} ${card.currency})`
                        }))}
                        required
                    />

                    <DatePicker
                        label="Loan Date"
                        value={formData.loanDate}
                        onChange={(date) => setFormData(prev => ({ ...prev, loanDate: date || Date.now() }))}
                    />

                    <Input
                        label="Description (Optional)"
                        value={formData.description}
                        onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                        placeholder="What was this loan for?"
                    />

                    <div className="border-t pt-4">
                        <div className="flex items-center justify-between mb-3">
                            <label className="text-sm font-medium text-gray-700">
                                Payment Schedule (Optional)
                            </label>
                            <Button
                                type="button"
                                variant="secondary"
                                size="sm"
                                onClick={() => {
                                    setPaymentSchedule([]);
                                    setShowPaymentScheduleModal(true);
                                }}
                            >
                                <Calendar className="w-4 h-4 mr-1" />
                                Set Payment Schedule
                            </Button>
                        </div>
                        {paymentSchedule.length > 0 && (
                            <div className="bg-gray-50 rounded-lg p-3">
                                <p className="text-sm text-gray-600 mb-2">
                                    {paymentSchedule.length} payment(s) scheduled:
                                </p>
                                <div className="space-y-1">
                                    {paymentSchedule.map((payment, index) => (
                                        <div key={index} className="flex justify-between text-sm">
                                            <span>{format(new Date(payment.date), 'MMM dd, yyyy')}</span>
                                            <span className="font-medium">
                                                {payment.amount.toLocaleString('fa-IR')} {formData.currency}
                                            </span>
                                        </div>
                                    ))}
                                </div>
                                <div className="mt-2 pt-2 border-t border-gray-200">
                                    <div className="flex justify-between text-sm">
                                        <span>Total:</span>
                                        <span className="font-semibold">
                                            {paymentSchedule.reduce((sum, payment) => sum + payment.amount, 0).toLocaleString('fa-IR')} {formData.currency}
                                        </span>
                                    </div>
                                    <div className="flex justify-between text-sm">
                                        <span>Loan Amount:</span>
                                        <span className="font-semibold">
                                            {parseFloat(formData.amount || '0').toLocaleString('fa-IR')} {formData.currency}
                                        </span>
                                    </div>
                                    <div className={`text-xs font-medium mt-1 ${Math.abs(paymentSchedule.reduce((sum, payment) => sum + payment.amount, 0) - parseFloat(formData.amount || '0')) < 0.01
                                        ? 'text-green-600'
                                        : 'text-red-600'
                                        }`}>
                                        {Math.abs(paymentSchedule.reduce((sum, payment) => sum + payment.amount, 0) - parseFloat(formData.amount || '0')) < 0.01
                                            ? '✅ Payment schedule matches loan amount'
                                            : `❌ Payment total must equal loan amount`
                                        }
                                    </div>
                                </div>
                            </div>
                        )}
                    </div>

                    <div className="flex justify-end space-x-3 pt-4">
                        <Button
                            type="button"
                            variant="secondary"
                            onClick={() => {
                                setShowAddModal(false);
                                setEditingFriendLoan(null);
                                setFormData({
                                    friendName: '',
                                    amount: '',
                                    currency: 'IRR',
                                    cardId: '',
                                    loanDate: Date.now(),
                                    description: '',
                                });
                            }}
                        >
                            Cancel
                        </Button>
                        <Button
                            type="submit"
                            disabled={!isFormValid()}
                        >
                            {editingFriendLoan ? 'Update Friend Loan' : 'Add Friend Loan'}
                        </Button>
                    </div>
                </form>
            </Modal>

            {/* Payback Confirmation Modal */}
            <Modal
                isOpen={showPaybackModal}
                onClose={() => {
                    setShowPaybackModal(false);
                    setPaybackFriendLoan(null);
                    setSelectedPaymentId(null);
                    setSelectedPaybackCardId('');
                }}
                title="Confirm Payback"
                size="md"
            >
                {paybackFriendLoan && (
                    <div className="space-y-4">
                        <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                            <div className="flex items-center">
                                <CheckCircle className="w-5 h-5 text-green-600 mr-2" />
                                <div>
                                    <h3 className="text-lg font-semibold text-green-800">
                                        {selectedPaymentId ?
                                            `${paybackFriendLoan.friendName} made a payment!` :
                                            `${paybackFriendLoan.friendName} made full settlement!`
                                        }
                                    </h3>
                                    {selectedPaymentId ? (
                                        <p className="text-green-700">
                                            Payment: {paybackFriendLoan.payments.find(p => p.id === selectedPaymentId)?.amount.toLocaleString('fa-IR')} {paybackFriendLoan.currency}
                                        </p>
                                    ) : paybackFriendLoan.payments.length > 0 ? (
                                        <p className="text-green-700">
                                            Full settlement: {paybackFriendLoan.payments.filter(p => p.status === 'pending').reduce((sum, p) => sum + p.amount, 0).toLocaleString('fa-IR')} {paybackFriendLoan.currency}
                                        </p>
                                    ) : (
                                        <p className="text-green-700">
                                            Amount: {paybackFriendLoan.amount.toLocaleString('fa-IR')} {paybackFriendLoan.currency}
                                        </p>
                                    )}
                                </div>
                            </div>
                        </div>

                        {paybackFriendLoan.payments.length > 0 && !selectedPaymentId && (
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Which payment did {paybackFriendLoan.friendName} make?
                                </label>
                                <div className="space-y-2">
                                    {paybackFriendLoan.payments.filter(p => p.status === 'pending').map((payment) => (
                                        <button
                                            key={payment.id}
                                            onClick={() => setSelectedPaymentId(payment.id)}
                                            className="w-full text-left p-3 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors"
                                        >
                                            <div className="flex justify-between items-center">
                                                <div>
                                                    <p className="font-medium text-gray-900">
                                                        {format(payment.dueDate, 'MMM dd, yyyy')}
                                                    </p>
                                                    <p className="text-sm text-gray-500">Due date</p>
                                                </div>
                                                <div className="text-right">
                                                    <p className="font-semibold text-gray-900">
                                                        {payment.amount.toLocaleString('fa-IR')} {paybackFriendLoan.currency}
                                                    </p>
                                                    <p className="text-sm text-gray-500">Amount</p>
                                                </div>
                                            </div>
                                        </button>
                                    ))}
                                </div>
                            </div>
                        )}

                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-2">
                                Which card did {paybackFriendLoan.friendName} return the money to?
                            </label>
                            <Select
                                value={selectedPaybackCardId}
                                onChange={(e) => setSelectedPaybackCardId(e.target.value)}
                                options={cards.map(card => ({
                                    value: card.id,
                                    label: `${card.name} (${card.balance.toLocaleString('fa-IR')} ${card.currency})`
                                }))}
                                required
                            />
                        </div>

                        <div className="flex justify-end space-x-3 pt-4">
                            <Button
                                type="button"
                                variant="secondary"
                                onClick={() => {
                                    setShowPaybackModal(false);
                                    setPaybackFriendLoan(null);
                                    setSelectedPaymentId(null);
                                    setSelectedPaybackCardId('');
                                }}
                            >
                                Cancel
                            </Button>
                            <Button
                                onClick={handleConfirmPayback}
                                variant="success"
                            >
                                <CheckCircle className="w-4 h-4 mr-2" />
                                Confirm Payback
                            </Button>
                        </div>
                    </div>
                )}
            </Modal>

            {/* Payment Schedule Modal */}
            <Modal
                isOpen={showPaymentScheduleModal}
                onClose={() => {
                    setShowPaymentScheduleModal(false);
                    setSelectedDate(null);
                    setPaymentAmount('');
                }}
                title="Set Payment Schedule"
                size="lg"
            >
                <div className="space-y-4">
                    <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                        <div className="flex items-center">
                            <Calendar className="w-5 h-5 text-blue-600 mr-2" />
                            <div>
                                <h3 className="text-lg font-semibold text-blue-800">
                                    Create Payment Schedule
                                </h3>
                                <p className="text-blue-700">
                                    Click on dates to set when payments should be made. Total amount: {formData.amount ? parseFloat(formData.amount).toLocaleString('fa-IR') : '0'} {formData.currency}
                                </p>
                            </div>
                        </div>
                    </div>

                    <PaymentCalendar
                        paymentSchedule={paymentSchedule}
                        onDateClick={(date) => {
                            setSelectedDate(date);
                            setPaymentAmount('');
                        }}
                        selectedDate={selectedDate}
                    />

                    {selectedDate && (
                        <div className="bg-gray-50 rounded-lg p-4">
                            <h4 className="font-medium text-gray-900 mb-3">
                                Set Payment Amount for {format(selectedDate, 'MMM dd, yyyy')}
                            </h4>
                            <div className="flex space-x-3">
                                <Input
                                    label="Amount"
                                    type="number"
                                    formatNumber={true}
                                    value={paymentAmount}
                                    onChange={(e) => setPaymentAmount(e.target.value)}
                                    placeholder="Enter amount"
                                    className="flex-1"
                                />
                                <Button
                                    onClick={() => {
                                        if (paymentAmount && parseFloat(paymentAmount) > 0) {
                                            const newPayment = {
                                                date: selectedDate,
                                                amount: parseFloat(paymentAmount)
                                            };
                                            setPaymentSchedule(prev => [...prev, newPayment].sort((a, b) => a.date - b.date));
                                            setSelectedDate(null);
                                            setPaymentAmount('');
                                        }
                                    }}
                                    disabled={!paymentAmount || parseFloat(paymentAmount) <= 0}
                                >
                                    Add Payment
                                </Button>
                            </div>
                        </div>
                    )}

                    {paymentSchedule.length > 0 && (
                        <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                            <h4 className="font-medium text-green-800 mb-2">Payment Schedule Summary</h4>
                            <div className="space-y-2">
                                {paymentSchedule.map((payment, index) => (
                                    <div key={index} className="flex justify-between items-center">
                                        <span className="text-green-700">
                                            {format(new Date(payment.date), 'MMM dd, yyyy')}
                                        </span>
                                        <div className="flex items-center space-x-2">
                                            <span className="font-medium text-green-800">
                                                {payment.amount.toLocaleString('fa-IR')} {formData.currency}
                                            </span>
                                            <button
                                                onClick={() => {
                                                    setPaymentSchedule(prev => prev.filter((_, i) => i !== index));
                                                }}
                                                className="text-red-500 hover:text-red-700"
                                            >
                                                <Trash2 className="w-4 h-4" />
                                            </button>
                                        </div>
                                    </div>
                                ))}
                                <div className="border-t border-green-200 pt-2 mt-2">
                                    <div className="flex justify-between font-semibold text-green-800">
                                        <span>Total Scheduled:</span>
                                        <span>
                                            {paymentSchedule.reduce((sum, payment) => sum + payment.amount, 0).toLocaleString('fa-IR')} {formData.currency}
                                        </span>
                                    </div>
                                    <div className="flex justify-between text-sm mt-1">
                                        <span>Loan Amount:</span>
                                        <span>
                                            {parseFloat(formData.amount || '0').toLocaleString('fa-IR')} {formData.currency}
                                        </span>
                                    </div>
                                    {paymentSchedule.length > 0 && (
                                        <div className={`text-sm font-medium mt-2 ${Math.abs(paymentSchedule.reduce((sum, payment) => sum + payment.amount, 0) - parseFloat(formData.amount || '0')) < 0.01
                                            ? 'text-green-600'
                                            : 'text-red-600'
                                            }`}>
                                            {Math.abs(paymentSchedule.reduce((sum, payment) => sum + payment.amount, 0) - parseFloat(formData.amount || '0')) < 0.01
                                                ? '✅ Payment schedule matches loan amount'
                                                : `❌ Payment total must equal loan amount (difference: ${Math.abs(paymentSchedule.reduce((sum, payment) => sum + payment.amount, 0) - parseFloat(formData.amount || '0')).toLocaleString('fa-IR')} ${formData.currency})`
                                            }
                                        </div>
                                    )}
                                </div>
                            </div>
                        </div>
                    )}

                    <div className="flex justify-end space-x-3 pt-4">
                        <Button
                            type="button"
                            variant="secondary"
                            onClick={() => {
                                setShowPaymentScheduleModal(false);
                                setSelectedDate(null);
                                setPaymentAmount('');
                            }}
                        >
                            Cancel
                        </Button>
                        <Button
                            onClick={() => {
                                setShowPaymentScheduleModal(false);
                                setSelectedDate(null);
                                setPaymentAmount('');
                            }}
                            disabled={paymentSchedule.length > 0 && Math.abs(paymentSchedule.reduce((sum, payment) => sum + payment.amount, 0) - parseFloat(formData.amount || '0')) >= 0.01}
                        >
                            Done
                        </Button>
                    </div>
                </div>
            </Modal>
        </div>
    );
};
