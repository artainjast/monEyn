import React, { useState } from 'react';
import { Button } from '../../components/Button';
import { LoanCard } from './components';
import { LoanForm } from './components';
import { PaymentConfirmationModal } from './components';
import { WageFeeModal } from './components';
import { PeriodicPaymentModal } from './components';
import { Loan } from '../../types';
import { loansService } from '../../services';
import { Plus } from 'lucide-react';
import { useLoans, useLoanPayments, useWageFeePayments, usePeriodicPayments } from './hooks';
import { v4 as uuidv4 } from 'uuid';
import { useAutoAnimate } from '@formkit/auto-animate/react';

export const Loans: React.FC = () => {
    const [showAddModal, setShowAddModal] = useState(false);
    const [editingLoan, setEditingLoan] = useState<Loan | null>(null);

    // AutoAnimate hook for loan cards
    const [loansGridRef] = useAutoAnimate();

    // Custom hooks for business logic
    const { loans, cards, loading, loadLoans } = useLoans();
    const {
        selectedPayment,
        selectedPaymentCardId,
        showPaymentModal,
        handleMarkPaymentPaid,
        handleConfirmPayment,
        closePaymentModal,
        setSelectedPaymentCardId,
    } = useLoanPayments(loans, cards, loadLoans);

    const {
        selectedLoanForWageFee,
        selectedWageFeeCardId,
        showWageFeeModal,
        handlePayWageFee,
        handleConfirmWageFeePayment,
        closeWageFeeModal,
        setSelectedWageFeeCardId,
    } = useWageFeePayments(cards, loadLoans);

    const {
        showPeriodicModal,
        editingLoan: periodicEditingLoan,
        periodicConfig,
        setPeriodicConfig,
        handleConfirmPeriodicPayments,
        closePeriodicModal,
    } = usePeriodicPayments(loadLoans);

    const handleSubmit = async (loanData: any) => {
        try {
            if (editingLoan) {
                await loansService.update(editingLoan.id, loanData);
            } else {
                let payments: any[] = [];

                // If there's a custom payment schedule, use it
                if (loanData.paymentSchedule && loanData.paymentSchedule.length > 0) {
                    payments = loanData.paymentSchedule.map((payment: any) => ({
                        id: uuidv4(), // Will be generated by the service
                        amount: payment.amount,
                        dueDate: payment.date,
                        status: 'pending' as const,
                    }));
                } else {
                    // Otherwise, generate periodic payments based on configuration
                    const { periodicConfig } = loanData;
                    if (periodicConfig && periodicConfig.numberOfMonths > 0) {
                        const amountPerPayment = loanData.totalPayback / periodicConfig.numberOfMonths;
                        const startDate = new Date(loanData.startDate);
                        startDate.setDate(periodicConfig.dayOfMonth);

                        for (let i = 0; i < periodicConfig.numberOfMonths; i++) {
                            const paymentDate = new Date(startDate);
                            paymentDate.setMonth(startDate.getMonth() + i);

                            // Ensure the day exists in the month (e.g., Feb 30 becomes Feb 28)
                            const lastDayOfMonth = new Date(paymentDate.getFullYear(), paymentDate.getMonth() + 1, 0).getDate();
                            if (periodicConfig.dayOfMonth > lastDayOfMonth) {
                                paymentDate.setDate(lastDayOfMonth);
                            }

                            payments.push({
                                id: uuidv4(), // Will be generated by the service
                                amount: amountPerPayment,
                                dueDate: paymentDate,
                                status: 'pending' as const,
                            });
                        }
                    }
                }

                const newLoan = await loansService.create(loanData);
                if (payments.length > 0) {
                    await loansService.update(newLoan.id, { payments });
                }
            }

            setShowAddModal(false);
            setEditingLoan(null);
            loadLoans();
        } catch (error) {
            console.error('Error saving loan:', error);
        }
    };

    const handleEdit = (loan: Loan) => {
        setEditingLoan(loan);
        setShowAddModal(true);
    };

    const handleDelete = async (loanId: string) => {
        if (window.confirm('Are you sure you want to delete this loan?')) {
            try {
                await loansService.delete(loanId);
                loadLoans();
            } catch (error) {
                console.error('Error deleting loan:', error);
            }
        }
    };

    const handleCloseForm = () => {
        setShowAddModal(false);
        setEditingLoan(null);
    };

    if (loading) {
        return (
            <div className="flex items-center justify-center h-64">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600"></div>
            </div>
        );
    }

    return (
        <div className="space-y-6">
            {/* Header */}
            <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4">
                <div>
                    <h1 className="text-2xl sm:text-3xl font-bold text-gray-900 dark:text-white">Loans</h1>
                    <p className="text-gray-600 dark:text-gray-400">Track your loans and payment schedules</p>
                </div>
                <Button onClick={() => setShowAddModal(true)} className="w-full sm:w-auto">
                    <Plus className="w-4 h-4 mr-2" />
                    Add Loan
                </Button>
            </div>

            {/* Loans Grid */}
            <div className="grid grid-cols-1 xl:grid-cols-2 gap-4 sm:gap-6" ref={loansGridRef}>
                {loans.map((loan) => (
                    <LoanCard
                        key={loan.id}
                        loan={loan}
                        cards={cards}
                        onEdit={handleEdit}
                        onDelete={handleDelete}
                        onMarkPaymentPaid={handleMarkPaymentPaid}
                        onPayWageFee={handlePayWageFee}
                    />
                ))}
            </div>

            {loans.length === 0 && (
                <div className="text-center py-12">
                    <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">No loans yet</h2>
                    <p className="text-gray-600 mb-8">Add your first loan to start tracking payments.</p>
                    <Button onClick={() => setShowAddModal(true)}>
                        <Plus className="w-4 h-4 mr-2" />
                        Add Loan
                    </Button>
                </div>
            )}

            {/* Loan Form Modal */}
            <LoanForm
                isOpen={showAddModal}
                onClose={handleCloseForm}
                onSubmit={handleSubmit}
                editingLoan={editingLoan}
            />

            {/* Payment Confirmation Modal */}
            <PaymentConfirmationModal
                isOpen={showPaymentModal}
                onClose={closePaymentModal}
                selectedPayment={selectedPayment}
                cards={cards}
                selectedPaymentCardId={selectedPaymentCardId}
                onCardChange={setSelectedPaymentCardId}
                onConfirm={handleConfirmPayment}
            />

            {/* Wage Fee Modal */}
            <WageFeeModal
                isOpen={showWageFeeModal}
                onClose={closeWageFeeModal}
                selectedLoan={selectedLoanForWageFee}
                cards={cards}
                selectedCardId={selectedWageFeeCardId}
                onCardChange={setSelectedWageFeeCardId}
                onConfirm={handleConfirmWageFeePayment}
            />

            {/* Periodic Payment Modal */}
            <PeriodicPaymentModal
                isOpen={showPeriodicModal}
                onClose={closePeriodicModal}
                editingLoan={periodicEditingLoan}
                periodicConfig={periodicConfig}
                onConfigChange={setPeriodicConfig}
                onConfirm={handleConfirmPeriodicPayments}
            />
        </div>
    );
};
